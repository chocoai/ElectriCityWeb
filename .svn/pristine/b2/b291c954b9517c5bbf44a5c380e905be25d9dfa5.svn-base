package com.ikkong.dg.controller;

import com.ikkong.core.dao.Blade;
import com.ikkong.core.dao.Db;
import com.ikkong.core.jfinal.ext.kit.JsonKit;
import com.ikkong.core.toolbox.Record;
import com.ikkong.dg.model.UserWorktype;
import com.ikkong.dg.service.UserWorktypeService;
import com.ikkong.dg.service.impl.UserWorktypeServiceImpl;
import com.ikkong.system.controller.base.UrlPermissController;

/**
 * Generated by Blade.
 * 2017-10-28 23:51:23
 */
public class UserWorktypeController extends UrlPermissController {
	private static String CODE = "userWorktype";
	private static String PERFIX = "dg_user_worktype";
	private static String LIST_SOURCE = "UserWorktype.findByPage";
	private static String BASE_PATH = "/dg/userWorktype/";
	
	UserWorktypeService service = new UserWorktypeServiceImpl();
	
	public void index() {
		setAttr("code", CODE);
		render(BASE_PATH + "userWorktype.html");
	}

	public void add() {
		setAttr("code", CODE);
		render(BASE_PATH + "userWorktype_add.html");
	}

	public void edit() {
		String id = getPara(0);
		UserWorktype userWorktype = service.findById(id);
		setAttr("model", JsonKit.toJson(userWorktype));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "userWorktype_edit.html");
	}

	public void view() {
		String id = getPara(0);
		String sql = Blade.dao().getScript(LIST_SOURCE).getSql();
		Record paraMap = Record.create().set("id", id);
		StringBuffer buf = new StringBuffer(sql).append(" where a.id = #{id} ");
		Record record = Db.init().selectOne(buf.toString(), paraMap);
		setAttr("model", JsonKit.toJson(record));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "userWorktype_view.html");
	}

	public void list() {
		Object grid = paginate(LIST_SOURCE);
		renderJson(grid);
	}

	public void save() {
		UserWorktype userWorktype = mapping(PERFIX, UserWorktype.class);
		boolean temp = service.save(userWorktype);
		if (temp) {
			renderJson(success(SAVE_SUCCESS_MSG));
		} else {
			renderJson(error(SAVE_FAIL_MSG));
		}
	}

	public void update() {
		UserWorktype userWorktype = mapping(PERFIX, UserWorktype.class);
		userWorktype.setVersion(userWorktype.getVersion()+1);
		boolean temp = service.update(userWorktype);
		if (temp) {
			renderJson(success(UPDATE_SUCCESS_MSG));
		} else {
			renderJson(error(UPDATE_FAIL_MSG));
		}
	}

	public void remove() {
		String ids = getPara("ids");
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			renderJson(success(DEL_SUCCESS_MSG));
		} else {
			renderJson(error(DEL_FAIL_MSG));
		}
	}
}
