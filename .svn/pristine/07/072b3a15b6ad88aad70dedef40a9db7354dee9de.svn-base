package com.ikkong.dg.controller;

import java.util.List;

import com.ikkong.common.constant.CommonConts.OrderFlag;
import com.ikkong.core.jfinal.ext.kit.JsonKit;
import com.ikkong.core.toolbox.Func;
import com.ikkong.core.toolbox.Record;
import com.ikkong.dg.meta.intercept.WorkTypeIntercept;
import com.ikkong.dg.model.WorkType;
import com.ikkong.dg.service.WorkTypeService;
import com.ikkong.dg.service.impl.WorkTypeServiceImpl;
import com.ikkong.system.controller.base.UrlPermissController;

/**
 * Generated by Blade.
 * 2017-09-24 12:44:38
 */
public class WorkTypeController extends UrlPermissController {
	private static String CODE = "workType";
	private static String PERFIX = "dg_worktype";
	private static String LIST_SOURCE = "WorkType.list";
	private static String BASE_PATH = "/dg/workType/";
	
	WorkTypeService service = new WorkTypeServiceImpl();
	
	public void index() {
		setAttr("code", CODE);
		render(BASE_PATH + "workType.html");
	}

	public void add() {
		setAttr("code", CODE);
		render(BASE_PATH + "workType_add.html");
	}

	public void edit() {
		String id = getPara(0);
		WorkType workType = service.findById(id);
		workType.setVersion(workType.getVersion()+1);
		setAttr("model", JsonKit.toJson(workType));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "workType_edit.html");
	}

	public void view() {
		String id = getPara(0);
		WorkType workType = service.findById(id);
		Record maps = Record.parse(workType);		
		maps.set("checkFlag", Func.getDictName(210, workType.getCheck()));
		maps.set("orderFlag", Func.getDictName(211, workType.getOrder_flag()));
		
		setAttr("model", maps);
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "workType_view.html");
	}

	public void list() {
		Object grid = paginate(LIST_SOURCE, new WorkTypeIntercept());
		renderJson(grid);
	}

	public void save() {
		WorkType workType = mapping(PERFIX, WorkType.class);
		try {
			Record paraMap = Record.create().set("name", workType.getName().trim());
			List<WorkType> typeList = service.findBy("name", "name=#{name}", paraMap);
			if(typeList != null && !typeList.isEmpty()){
				renderJson(error(workType.getName()+" 系统已存在！"));
				return;
			}
			workType.setOrder_flag(OrderFlag.HAS_PERMISSION.getFlagVal());
			workType.setVersion(1);
			workType.setTimes(0);
			boolean temp = service.save(workType);
			if (temp) {
				renderJson(success(SAVE_SUCCESS_MSG));
			} else {
				renderJson(error(SAVE_FAIL_MSG));
			}
		} catch (Exception e) {
			e.printStackTrace();
			renderJson(error("服务端处理异常，请联系后台管理员！"));
		}
	}

	public void update() {
		WorkType workType = mapping(PERFIX, WorkType.class);
		workType.setVersion(workType.getVersion()+1);
		boolean temp = service.update(workType);
		if (temp) {
			renderJson(success(UPDATE_SUCCESS_MSG));
		} else {
			renderJson(error(UPDATE_FAIL_MSG));
		}
	}

	public void remove() {
		String ids = getPara("ids");
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			renderJson(success(DEL_SUCCESS_MSG));
		} else {
			renderJson(error(DEL_FAIL_MSG));
		}
	}
}
