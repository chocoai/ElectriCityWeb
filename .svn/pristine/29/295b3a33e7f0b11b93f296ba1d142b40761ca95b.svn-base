package com.ikkong.dg.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import com.ikkong.common.constant.CommonConts.MsgTempCode;
import com.ikkong.common.constant.CommonConts.MsgType;
import com.ikkong.common.constant.CommonConts.UserWorkTypeStatus;
import com.ikkong.common.constant.CommonConts.WorkStatus;
import com.ikkong.common.vo.ShiroUser;
import com.ikkong.core.dao.Blade;
import com.ikkong.core.dao.Db;
import com.ikkong.core.jfinal.ext.kit.JsonKit;
import com.ikkong.core.jfinal.ext.shiro.ShiroKit;
import com.ikkong.core.toolbox.Record;
import com.ikkong.dg.meta.intercept.WorkTypeCheckIntercept;
import com.ikkong.dg.model.UserWorktype;
import com.ikkong.dg.model.WorktypeCheck;
import com.ikkong.dg.service.MessagesService;
import com.ikkong.dg.service.UserWorktypeService;
import com.ikkong.dg.service.WorktypeCheckService;
import com.ikkong.dg.service.impl.MessagesServiceImpl;
import com.ikkong.dg.service.impl.UserWorktypeServiceImpl;
import com.ikkong.dg.service.impl.WorktypeCheckServiceImpl;
import com.ikkong.system.controller.base.UrlPermissController;
import com.jfinal.aop.Clear;
import com.jfinal.kit.PropKit;

/**
 * Generated by Blade.
 * 2017-10-20 09:25:28
 */
public class WorkTypeCheckController extends UrlPermissController {
	private static String CODE = "workTypeCheck";
	private static String PERFIX = "dg_worktype_check";
	private static String LIST_SOURCE = "WorkTypeCheck.findForBackground";
	private static String BASE_PATH = "/dg/workTypeCheck/";
	
	private WorktypeCheckService service = new WorktypeCheckServiceImpl();
	private UserWorktypeService userWorkService = new UserWorktypeServiceImpl();
	private MessagesService msgServ = new MessagesServiceImpl();
	
	public void index() {
		setAttr("code", CODE);
		render(BASE_PATH + "workTypeCheck.html");
	}

	public void add() {
		setAttr("code", CODE);
		render(BASE_PATH + "workTypeCheck_add.html");
	}

	public void edit() {
		String id = getPara(0);
		WorktypeCheck workTypeCheck = service.findById(id);
		setAttr("model", JsonKit.toJson(workTypeCheck));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "workTypeCheck_edit.html");
	}

	public void view() {
		String id = getPara(0);		
		Record paraMap = Record.create().set("id", id);
		String sql = Blade.dao().getScript("WorkTypeCheck.getById").getSql();
		Record record = Db.init().queryMap(sql, paraMap);
		
		String accessUrl = PropKit.get("access.auth");
		setAttr("model", record);
		setAttr("id", id);
		setAttr("prefix", accessUrl);
		setAttr("code", CODE);
		render(BASE_PATH + "workTypeCheck_view.html");
	}

	public void list() {
		Object grid = paginate(LIST_SOURCE, new WorkTypeCheckIntercept());
		renderJson(grid);
	}

	public void save() {
		WorktypeCheck workTypeCheck = mapping(PERFIX, WorktypeCheck.class);
		boolean temp = service.save(workTypeCheck);
		if (temp) {
			renderJson(success(SAVE_SUCCESS_MSG));
		} else {
			renderJson(error(SAVE_FAIL_MSG));
		}
	}

	public void update() {
		WorktypeCheck workTypeCheck = mapping(PERFIX, WorktypeCheck.class);
		workTypeCheck.setVersion(workTypeCheck.getVersion()+1);
		boolean temp = service.update(workTypeCheck);
		if (temp) {
			renderJson(success(UPDATE_SUCCESS_MSG));
		} else {
			renderJson(error(UPDATE_FAIL_MSG));
		}
	}

	public void remove() {
		String ids = getPara("ids");
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			renderJson(success(DEL_SUCCESS_MSG));
		} else {
			renderJson(error(DEL_FAIL_MSG));
		}
	}
	
	public void auditCheck() {
		String ids = getPara(0);
		setAttr("checkids", ids);
		setAttr("code", CODE);
		render(BASE_PATH + "workTypeCheck_audit.html");
	}
	
	@Clear
	public void auditDeal() {
		String ids = getPara("ids");
		Integer status = getParaToInt("status");
		String mark = getPara("mark");// 审核描述
		if(StringUtils.isBlank(ids) || status == null){
			renderJson(error("操作选项与状态不能为空!"));
			return ;
		}
		
		ShiroUser user = ShiroKit.getUser();
		String[] idsArray = StringUtils.split(ids, ",");
		Record paraMap = Record.create().set("ids", idsArray);
		List<WorktypeCheck> list = Blade.create(WorktypeCheck.class).findBy("id in (#{join(ids)})", paraMap);
		StringBuffer idsBuf = new StringBuffer();
		List<Long> dgUserList = new ArrayList<Long>();
		for(WorktypeCheck vo : list){
			vo.setStatus(status);
			vo.setMark(mark);
			vo.setAdmin_id((Integer)user.getId());
			vo.setVersion(vo.getVersion()+1);
			vo.setUpdate_tm(new Date());
			idsBuf.append(vo.getUser_worktype_id()).append(",");			
			dgUserList.add(vo.getDg_user_id());
		}
		try {
			int[] batchStatus = service.updateBathById(list);
			int count = 0;
			for(int a : batchStatus) count += a;
			if(list.size() == count){
				modifyUserWorktypeStatus(idsBuf, status);//电工工种同时修改
				String templateVal = null;
				if(WorkStatus.PASSED.getStatusVal() == status) {
					templateVal = MsgTempCode.TMP_1012.getTmpVal();
				} else if(WorkStatus.FAILURE.getStatusVal() == status) {
					templateVal = MsgTempCode.TMP_1013.getTmpVal();
				}
				// 审核添加消息
				msgServ.addMsgByUserList(dgUserList, MsgType.EVENT_MSG.getStatusVal(), templateVal);
				renderJson(success("工种审核完成!"));
			} else {
				renderJson(fail("工种审核失败!"));
			}
		} catch (Exception e) {
			e.printStackTrace();
			renderJson(error("工种审核服务端异常!"));
		}
	}
	
	private void modifyUserWorktypeStatus(StringBuffer idsBuf, Integer status){
		String uwIds = idsBuf.deleteCharAt(idsBuf.length()-1).toString();
		Record para = Record.create().set("uwIds", uwIds.split(","));
		List<UserWorktype> uwList = userWorkService.findBy("id in (#{join(uwIds)})", para);
		if(uwList != null && !uwList.isEmpty()){
			Integer state = null; 
			if(WorkStatus.PASSED.getStatusVal() == status) {
				state = UserWorkTypeStatus.AUDIT_PASSD.getStatusVal();
			} else if(WorkStatus.FAILURE.getStatusVal() == status) {
				state = UserWorkTypeStatus.AUDIT_FAIL.getStatusVal();
			}
				
			for(UserWorktype uwt: uwList){
				uwt.setStatus(state);
				uwt.setVersion(uwt.getVersion()+1);
			}
			userWorkService.updateBathById(uwList);
		}
	}
}
