package com.ikkong.dg.android;

import org.apache.commons.lang3.StringUtils;

import com.aliyuncs.exceptions.ClientException;
import com.ikkong.common.constant.CommonConts;
import com.ikkong.common.constant.CommonConts.SmsTempCode;
import com.ikkong.common.utils.SmsSender;
import com.ikkong.core.base.BaseController;
import com.ikkong.core.constant.ConstCache;
import com.ikkong.core.dao.Blade;
import com.ikkong.core.jfinal.ext.shiro.ShiroKit;
import com.ikkong.core.shiro.DgUserToken;
import com.ikkong.core.sms.model.SendSmsResponse;
import com.ikkong.dg.model.DgUser;
import com.ikkong.dg.model.vo.SmsInfo;
import com.jfinal.plugin.ehcache.CacheKit;

/**
 * 短信发送请求
 * 
 * @author sparker
 *
 */
public class SmsController extends BaseController {

	private void pushSms(int tempFlag) {
		String phoneNo = getPara("phoneNo");//手机号码
		Long timeMillis = getParaToLong("millis");//时间毫秒值
		String digest = getPara("digest");//加密串
		if(StringUtils.isBlank(phoneNo)) {
			renderJson(warn("手机号不能为空!"));
			return;
		}
		if(timeMillis == null || timeMillis < 1) {
			renderJson(warn("时间值不能为空!"));
			return;
		}
		if(!phoneNo.matches(CommonConts.PhoneRegex)) {
			renderJson(warn("手机号码无效,请检查!"));
			return;
		}
		if(StringUtils.isBlank(digest)) {
			renderJson(warn("匹配码不能为空！"));
			return;
		}
		String mineDegist = SmsSender.digestCode(phoneNo, timeMillis);
		if(!digest.equals(mineDegist)) {
			renderJson(warn("匹配串不一致，请求失败！"));
			return;
		}
		SendSmsResponse smsRes = null;
		try {
			String sessionId = ShiroKit.getSession().getId().toString();
			String vcode = SmsSender.genVCode();
			switch (tempFlag) {
			case 1://找回密码修改密码短信模板
				smsRes = SmsSender.findPwdSms(phoneNo, vcode, sessionId);
				break;
			case 2://注册短信模板
				smsRes = SmsSender.registSms(phoneNo, vcode, sessionId);
				break;
			}
			
			String resCode = smsRes.getRequestId();
			SmsInfo info = new SmsInfo();
			info.setPhoneNo(phoneNo);
			info.setSmsKey(resCode);
			info.setVcode(vcode);
			CacheKit.put(ConstCache.SMS_CACHE, resCode, info);
			System.out.println(resCode);
			renderJson(success("短信发送成功，请注意查收！").setData(resCode));
		} catch (ClientException e) {
			e.printStackTrace();
			renderJson(error("短信请求失败，服务端异常！"));
		}
		return;
	}
	
	public void sendSms() {//修改原密码短信发送
		DgUserToken token = dgUserToken();
		DgUser user = Blade.create(DgUser.class).findById(token.getUserId());
		
		String sessionId = ShiroKit.getSession().getId().toString();
		String vcode = SmsSender.genVCode();			
		try {
			SendSmsResponse smsRes = SmsSender.findPwdSms(user.getPhoneno(), vcode, sessionId);
			String resCode = smsRes.getRequestId();
			SmsInfo info = new SmsInfo();
			info.setPhoneNo(user.getPhoneno());
			info.setSmsKey(resCode);
			info.setVcode(vcode);
			CacheKit.put(ConstCache.SMS_CACHE, resCode, info);
			renderJson(success("短信发送成功，请注意查收！").setData(resCode));
		} catch (ClientException e) {
			e.printStackTrace();
			renderJson(error("短信发送请求失败，服务端异常！"));
		}
	}
	
	public void passdSms() {//找回密码短信
		pushSms(SmsTempCode.FIND_SMS.getTmpVal());
	}
	
	public void registSms() {//注册短信
		pushSms(SmsTempCode.REGIST_SMS.getTmpVal());
	}
}
