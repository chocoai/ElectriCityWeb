package com.ikkong.system.controller;

import java.util.Date;
import java.util.List;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.DisabledAccountException;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.session.Session;
import org.apache.shiro.subject.Subject;

import com.ikkong.common.constant.CommonConts.ItemStatus;
import com.ikkong.common.constant.CommonConts.MsgType;
import com.ikkong.common.constant.CommonConts.WorkStatus;
import com.ikkong.common.vo.LoginLog;
import com.ikkong.core.dao.Blade;
import com.ikkong.core.dao.Db;
import com.ikkong.core.jfinal.ext.autoroute.ControllerBind;
import com.ikkong.core.jfinal.ext.kit.JLogKit;
import com.ikkong.core.jfinal.ext.shiro.ShiroKit;
import com.ikkong.core.shiro.SysUserToken;
import com.ikkong.core.toolbox.Func;
import com.ikkong.core.toolbox.Record;
import com.ikkong.core.toolbox.log.LogManager;
import com.ikkong.system.controller.base.AdminBaseController;
import com.jfinal.aop.Before;
import com.jfinal.aop.Clear;
import com.jfinal.ext.interceptor.GET;
import com.jfinal.ext.interceptor.POST;
import com.jfinal.kit.LogKit;

@Clear
@ControllerBind(controllerKey = "/")
public class IndexController extends AdminBaseController {
	
	// private MessagesService service = new MessagesServiceImpl();

	@Before(GET.class)
	public void login() {
		if (ShiroKit.isAuthenticated()) {
			index();
			return;
		}
		render(loginRealPath);
	}

	public void index() {
		reload();
		render(indexRealPath);
	}
	
	public void reload() {
		sysMessages();//系统消息统计量
		totalUsers();// 注册电工用户
		totalMoney();// 系统总金额
		setAttr("checks", workOrderCheck());// 工种审核
		setAttr("business", business());// 交易记录
		setAttr("items", orderItems());//发布中的项目
		render("/main.html");
	}	
	
	private List<Record> orderItems() {
		String sql = Db.init().getSql("WorkOrder.findMainList");
		StringBuffer sqlBuf = new StringBuffer(sql);
		sqlBuf.append(" where a.status = #{status}");
		sqlBuf.append(" order by a.publish_time desc limit 20");
		List<Record> list = Db.init().selectList(sqlBuf.toString(),
				Record.create().set("status", ItemStatus.PUBLISH.getStatusVal()));		
		return list;
	}

	private List<Record> business() {
		String sql = Db.init().getSql("Business.findMainList");
		List<Record> list = Db.init().selectList(sql+" order by a.create_time desc limit 20");		
		return list;
	}

	private List<Record> workOrderCheck() {
		String sql = Db.init().getSql("WorkTypeCheck.findForBackground");
		StringBuffer sqlBuf = new StringBuffer(sql);
		sqlBuf.append(" where a.status = #{status}");
		sqlBuf.append(" order by a.create_tm desc limit 20");
		List<Record> list = Db.init().selectList(sqlBuf.toString(),
				Record.create().set("status", WorkStatus.WAITING.getStatusVal()));		
		return list;
	}

	private void totalUsers() {
		String sql = "select count(1) userCnt from dg_user";
		Record users = Db.init().queryMap(sql, Record.create());
		setAttr("userCnt", users.getInt("userCnt"));
	}

	private void totalMoney() {
		String totalSql = "select sum(balance) total from dg_user";
		Record total = Db.init().queryMap(totalSql, Record.create());
		setAttr("total", total.getFloat("total"));
	}
	
	private void sysMessages() {
		String sql = "select count(1) msgCnt from dg_message a ";
		StringBuffer sqlBuf = new StringBuffer(sql);
		sqlBuf.append(" where a.type = #{type}");		
		Record users = Db.init().queryMap(sql, Record.create()
				.set("type", MsgType.SYS_MSG.getStatusVal()));
		setAttr("msgCnt", users.getInt("msgCnt"));
	}

	@Before(POST.class)
	public void doLogin() {
		String account = getPara("account");
		String password = getPara("password");
		if (!validateCaptcha("imgCode")) {
			renderJson(error("验证码错误"));
			return;
		}
		Subject currentUser = ShiroKit.getSubject();
		SysUserToken token = new SysUserToken(account, password.toCharArray());
		// token.setRememberMe(true);
		try {
			currentUser.login(token);
			Session session = ShiroKit.getSession();
			JLogKit.println("sessionID	: {} ", session.getId());
			JLogKit.println("sessionHost	: {}", session.getHost());
			JLogKit.println("sessionTimeOut	: {}", session.getTimeout());
		} catch (UnknownAccountException e) {
			LogKit.error("账号不存在：{}", e);
			renderJson(error("账号不存在"));
			return;
		} catch (DisabledAccountException e) {
			LogKit.error("账号未启用：{}", e);
			renderJson(error("账号未启用"));
			return;
		} catch (IncorrectCredentialsException e) {
			LogKit.error("密码错误：{}", e);
			renderJson(error("密码错误"));
			return;
		} catch (AuthenticationException e) {
			LogKit.error("账户名或密码不匹配：{}", e);
			renderJson(error("账户名或密码不匹配!"));
			return;
		} catch (RuntimeException e) {
			LogKit.error("未知错误,请联系管理员：{}", e);
			renderJson(error(e.getMessage()));
			return;
		}
		doLog(ShiroKit.getSession(), "登录");
		renderJson(success("登录成功"));
		return;
	}

	public void captcha() {
		renderCaptcha();
	}

	public void logout() {
		doLog(ShiroKit.getSession(), "登出");
		Subject currentUser = ShiroKit.getSubject();
		currentUser.logout();
		redirect("/login");
	}

	public void unauth() {
		if (ShiroKit.notAuthenticated()) {
			redirect("login");
		}
		render(noPermissionPath);
	}

	public void doLog(Session session, String type) {
		if (!LogManager.isDoLog()) {
			return;
		}
		try {
			LoginLog log = new LoginLog();
			String msg = Func.format("[sessionID]: {} [sessionHost]: {} [sessionHost]: {}", session.getId(),
					session.getHost(), session.getTimeout());
			log.setLogname(type);
			log.setMethod(msg);
			log.setCreatetime(new Date());
			log.setSucceed("1");
			log.setUserid(Func.format(ShiroKit.getUser().getId()));
			Blade.create(LoginLog.class).save(log);
		} catch (Exception ex) {
			LogKit.logNothing(ex);
		}
	}
}
