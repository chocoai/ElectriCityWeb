package com.ikkong.dg.android;

import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;

import com.ikkong.common.constant.CommonConts.ItemStatus;
import com.ikkong.common.constant.CommonConts.MsgTempCode;
import com.ikkong.common.constant.CommonConts.MsgType;
import com.ikkong.common.constant.CommonConts.ProgressStatus;
import com.ikkong.core.base.BaseController;
import com.ikkong.core.dao.Blade;
import com.ikkong.core.dao.Db;
import com.ikkong.core.toolbox.Record;
import com.ikkong.core.toolbox.support.BladePage;
import com.ikkong.dg.model.OrderProgress;
import com.ikkong.dg.model.WorkOrder;
import com.ikkong.dg.service.MessagesService;
import com.ikkong.dg.service.OrderProgressService;
import com.ikkong.dg.service.WorkOrderService;
import com.ikkong.dg.service.impl.MessagesServiceImpl;
import com.ikkong.dg.service.impl.OrderProgressServiceImpl;
import com.ikkong.dg.service.impl.WorkOrderServiceImpl;

/**
 * 进度API
 * 
 * @author sparker
 *
 */
public class ProgressController extends BaseController {

	private static final String SQL_LIST = "OrderProgress.findList";

	private OrderProgressService service = new OrderProgressServiceImpl();

	private WorkOrderService workOrdServ = new WorkOrderServiceImpl();
	
	private MessagesService msgServ = new MessagesServiceImpl();

	public void add() {// 新增
		Long workOrderId = getParaToLong("workOrderId");
		String location = getPara("location");// 坐标地址
		String longitude = getPara("longitude");// 经度
		String latitude = getPara("latitude");// 纬度
		Integer status = getParaToInt("status");
		String mark = getPara("mark");

		if (workOrderId == null || workOrderId <= 0) {
			renderJson(warn("请提供工种子项目!"));
			return;
		}
		if(status == null || status < 0) {
			renderJson(warn("进度状态不能为空!"));
			return;
		}

		Long dgId = dgUserToken().getUserId();
		OrderProgress progress = new OrderProgress();
		progress.setCreate_id(dgId);
		if (StringUtils.isNotBlank(longitude)) {
			progress.setLongitude(Double.valueOf(longitude));
		}
		if (StringUtils.isNotBlank(latitude)) {
			progress.setLatitude(Double.valueOf(latitude));
		}

		progress.setMark(mark);
		if(status != null && status > -1){
			progress.setStatus(status);
		}
		progress.setWork_order_id(workOrderId);
		progress.setLocation(location);
		progress.setVersion(1);
		progress.setCreate_time(new Date());

		try {
			if (service.save(progress)) {
				if(status == ProgressStatus.SUBMIT.getStatusVal()) {
					// 提交上班进度 1019
					msgServ.addMsgByTemplate(dgId, MsgType.EVENT_MSG.getStatusVal(), MsgTempCode.TMP_1019.getTmpVal());
				}
				renderJson(success("项目进度记录添加成功!"));
			} else {
				renderJson(fail("项目进度记录新增失败!"));
			}
		} catch (Exception e) {
			renderJson(fail("服务端保存异常, 请联系管理员!"));
		}
	}

	/**
	 * 根据Id修改状态
	 */
	public void modifyStatus() {
		Long workOrderId = getParaToLong("workOrderId");// 新增参数
		Long pid = getParaToLong("id");
		Integer status = getParaToInt("status");//开工状态
		Integer endStatus = getParaToInt("endStatus");//完工状态
		String mark = getPara("mark");//开工描述
		String endDesc = getPara("endDesc");//完工描述
		if (pid == null || pid < 1) {
			renderJson(warn("进度Id无效，非法参数！"));
			return;
		}
		Integer[] stats = {-1, 0, 1, 3 };		
		if ((status != null && !ArrayUtils.contains(stats, status)) 
				|| (endStatus != null && !ArrayUtils.contains(stats, endStatus))) {
			renderJson(warn("状态参数值不在定义范围内！"));
			return;
		}
		
		OrderProgress vo = service.findById(pid);
		if(status != null && status > -1){
			vo.setStatus(status);
			vo.setStart_tm(new Date());//开工时间
			vo.setMark(mark);
		}
		
		if(endStatus != null && endStatus > -1){
			vo.setEnd_status(endStatus);
			vo.setEnd_tm(new Date());//完工时间
			vo.setEnd_desc(endDesc);
		}
		vo.setUpdate_tm(new Date());
		vo.setVersion(vo.getVersion() + 1);
		
		try {
			if (service.update(vo)) {
				String tempVal = null;
				WorkOrder wo = workOrdServ.findById(workOrderId);
				Long receiverId = wo.getAccept_user_id();
				if(endStatus != null && endStatus > -1
						&& endStatus == ProgressStatus.SUBMIT.getStatusVal()){
					tempVal = MsgTempCode.TMP_1020.getTmpVal();//提交完工进度
					receiverId = wo.getCreate_id();
				}
				// 开工状态时处理
				if (status == ProgressStatus.CONFIRM.getStatusVal()) {
					Record paras = Record.create()
							.set("itemStatus", ItemStatus.PUBLISH.getStatusVal())
							.set("workOrderId", workOrderId);
					// 修改记录：增加状态=(1,2)条件,表示只有当存在已经被同意或者默认的记录
					String sql = "where status = #{itemStatus} and work_order_id = #{workOrderId}";//status = 1
					List<OrderProgress> proList = service.findBy(sql, paras);
					if (proList != null && proList.size() == 1) {
						
						wo.setVersion(wo.getVersion() + 1);
						wo.setStatus(ItemStatus.INPROCCESS.getStatusVal());
						wo.setProceed_time(new Date());
						workOrdServ.update(wo);
					}

					if(status != null && status > -1) {// 开工发送消息
						//1025	发包方同意上班进度
						tempVal = MsgTempCode.TMP_1026.getTmpVal();
					} else if(endStatus != null && endStatus > -1){// 完工发送消息
						//1027	发包方同意下班进度
						tempVal = MsgTempCode.TMP_1028.getTmpVal();						
					}
				} else if(status == ProgressStatus.REFUSED.getStatusVal()) {
					if(status != null && status > -1) {// 拒绝开工发送消息
						//1026	发包方拒绝上班进度
						tempVal = MsgTempCode.TMP_1027.getTmpVal();
					}
					if(endStatus != null && endStatus > -1){// 拒绝完工发送消息
						//1028	发包方拒绝下班进度
						tempVal = MsgTempCode.TMP_1029.getTmpVal();
					}
				}
				msgServ.addMsgByTemplate(receiverId, MsgType.EVENT_MSG.getStatusVal(), tempVal);
				renderJson(success("进度状态修改成功！"));
			} else {
				renderJson(fail("进度状态修改失败！"));
			}
		} catch (Exception e) {
			e.printStackTrace();
			renderJson(error("状态修改异常，服务端报错！"));
		}
	}

	public void query() {// 进度查询
		Long dgUserId = dgUserToken().getUserId();
		Long workOrderId = getParaToLong("workOrderId");// 必传参数
		Integer status = getParaToInt("status");
		String createStart = getPara("createStart");
		String createEnd = getPara("createEnd");
		Long createId = getParaToLong("create_id");

		if (workOrderId == null || workOrderId <= 0) {
			renderJson(error("子项目Id不能为空！"));
			return;
		}

		String sql = Blade.dao().getScript(SQL_LIST).getSql();
		Record paraMap = Record.create();
		StringBuffer sqlBuf = new StringBuffer(sql).append(" where 1=1 ");
		sqlBuf.append(" and a.work_order_id = ").append(workOrderId);

		if (createId != null && createId > 0) {
			if (dgUserId == createId) {
				paraMap.set("dgUserId", createId);
				sqlBuf.append(" and a.create_id = #{dgUserId} ");
			} else {
				renderJson(warn("进度提起人和当前账号不对应!"));
				return;
			}
		}

		if (status != null && status > -1) {
			paraMap.set("status", status);
			sqlBuf.append(" and a.status = #{status} ");
		}

		if (StringUtils.isNotBlank(createStart)) {
			paraMap.set("createStart", createStart);//
			sqlBuf.append(" and a.create_time >= #{createStart}");
		}

		if (StringUtils.isNotBlank(createEnd)) {
			paraMap.set("createEnd", createEnd);
			sqlBuf.append(" and a.create_time < DATE_ADD(#{createEnd},INTERVAL 1 DAY)");
		}

		sqlBuf.append(" order by a.create_time desc");
		BladePage<Object> resultPage = Db.init().paginate(sqlBuf.toString(), paraMap, pageNo("page"), pageSize);
		if (resultPage != null && !resultPage.getRows().isEmpty()) {
			renderJson(success("查询到结果！").setData(resultPage));
		} else {
			renderJson(success("未查询到项目进度的记录!"));
		}
	}
}