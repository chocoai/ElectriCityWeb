package com.ikkong.dg.service.impl;

import java.util.List;
import java.util.Set;

import com.ikkong.common.constant.CommonConts.UserStatus;
import com.ikkong.core.base.service.impl.BaseService;
import com.ikkong.core.dao.Db;
import com.ikkong.core.toolbox.Record;
import com.ikkong.dg.model.DgUser;
import com.ikkong.dg.model.vo.DgUserInfo;
import com.ikkong.dg.service.DgUserService;
import com.jfinal.kit.PropKit;

/**
 * Generated by Blade. 2017-09-24 12:44:38
 */
public class DgUserServiceImpl extends BaseService<DgUser> implements DgUserService {
	private static final String ACCESS_URL = PropKit.get("access.head");

	@Override
	public DgUserInfo findByUserId(Long id) {
		DgUser dgUser = findById(id);
		if (dgUser != null && dgUser.getId() != null) {
			DgUserInfo uInfo = new DgUserInfo();
			uInfo.setId(dgUser.getId());
			uInfo.setCode(dgUser.getCode());
			uInfo.setGender(dgUser.getGender());
			if(dgUser.getIntro_id() != null) {
				uInfo.setIntroId(dgUser.getIntro_id());
				DgUser introUser = findById(dgUser.getIntro_id());
				uInfo.setIntroPhone(introUser.getPhoneno());
			}
			
			uInfo.setHeadUrl(ACCESS_URL + dgUser.getHead_url());
			uInfo.setName(dgUser.getName());
			uInfo.setPhoneNo(dgUser.getPhoneno());
			uInfo.setAddress(dgUser.getAddress());
			uInfo.setStatus(dgUser.getStatus());
			return uInfo;
		}
		return null;
	}

	@Override
	public DgUser getByPhoneNo(String phoneNo) {
		return findFirstBy("where phoneno = #{phoneNo}", Record.create().set("phoneNo", phoneNo.trim()));
	}

	@Override
	public DgUser hasValidPhone(String phoneNo) {
		Record param = Record.create().set("phoneNo", phoneNo.trim());
		param.set("status", UserStatus.DISABLE.getStatusVal());
		return findFirstBy("where phoneno = #{phoneNo} and status <> #{status}", param);
	}

	@Override
	public void resetUsersStatus(Set<Long> usersId) {
		Record para = Record.create().set("ids", usersId.toArray());
		List<DgUser> users = findBy("where id in (#{join(ids)})", para);
		if(users != null && !users.isEmpty()) {
			for(DgUser user : users) {
				user.setStatus(UserStatus.NORMAL.getStatusVal());
				user.setVersion(user.getVersion()+1);
			}
			updateBathById(users);
		}
	}

	@Override
	public List<String> findPhonesByList(Set<Long> usersId) {
		String sql = "select phoneno from dg_user where id in (#{join(ids)})";
		Record para = Record.create().set("ids", usersId.toArray());
		return Db.init().queryListStr(sql, para);
	}

	@Override
	public List<String> findPhonesByList(Long[] usersId) {
		String sql = "select phoneno from dg_user where id in (#{join(ids)})";
		Record para = Record.create().set("ids", usersId);
		return Db.init().queryListStr(sql, para);
	}

}
